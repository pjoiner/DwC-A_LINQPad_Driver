<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DwC_A.Terms" #>
<#@ import namespace="System.IO" #>
using System;
using DwC_A;
using System.Collections.Generic;
using System.Linq;
using System.Configuration;

namespace DwCArchive
{
    public class ArchiveDb : IDisposable
    {
        private readonly ArchiveReader archive;

        public ArchiveDb(string fileName)
        {
            this.archive = new ArchiveReader(fileName);
        }

        public IEnumerable<<#=CoreFileName()#>Type> <#=CoreFileName()#> 
        {
            get
            {
                return archive.CoreFile.DataRows.Select( row => new <#=CoreFileName()#>Type(row) );
            }
        }

<#
foreach(var extension in archive.Extensions)
{
    var rowType = extension.FileMetaData.FileName;
    var rowTypeShortName = Path.GetFileNameWithoutExtension(rowType);
        #>public IEnumerable<<#=rowTypeShortName#>Type> <#=rowTypeShortName#>
        {
            get
            {
                return archive
                    .Extensions
                    .GetFileReaderByFileName("<#=rowType#>")
                    .DataRows
                    .Select( row => new <#=rowTypeShortName#>Type(row));
            }
        }
        <#
}
#>

        #region IDisposable
        private bool disposed = false;
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    archive.Dispose();
                }
            }
            disposed = true;
        }

        ~ArchiveDb()
        {
            Dispose(false);
        }
        #endregion

    }
}

